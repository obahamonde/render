// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  following User[]   @relation("Followers")
  followers User[]   @relation("Followers")
  comments  Comment[] @relation("CommentAuthor")
  comment   Comment[] @relation("CommentLikedBy")
  profile   Profile?
  likes     Like[]
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
  comments  Comment[]
  likes     Like[]
}

model Profile {
  id     String @id @default(uuid())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String     @unique
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  posts     Post[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  likedBy   User[]   @relation("CommentLikedBy")
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
